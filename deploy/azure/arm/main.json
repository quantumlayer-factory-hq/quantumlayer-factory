{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "projectName": {
            "type": "string",
            "defaultValue": "qlf",
            "metadata": {
                "description": "Project name used for resource naming"
            }
        },
        "environment": {
            "type": "string",
            "defaultValue": "prod",
            "allowedValues": ["dev", "staging", "prod"],
            "metadata": {
                "description": "Environment name"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources"
            }
        },
        "administratorLogin": {
            "type": "string",
            "defaultValue": "qlfadmin",
            "metadata": {
                "description": "PostgreSQL administrator login"
            }
        },
        "administratorPassword": {
            "type": "securestring",
            "metadata": {
                "description": "PostgreSQL administrator password"
            }
        },
        "nodeCount": {
            "type": "int",
            "defaultValue": 3,
            "minValue": 1,
            "maxValue": 10,
            "metadata": {
                "description": "Number of AKS nodes"
            }
        },
        "nodeVmSize": {
            "type": "string",
            "defaultValue": "Standard_B4ms",
            "metadata": {
                "description": "VM size for AKS nodes"
            }
        }
    },
    "variables": {
        "acrName": "[concat(parameters('projectName'), 'registry', uniqueString(resourceGroup().id))]",
        "aksName": "[concat(parameters('projectName'), '-', parameters('environment'), '-cluster')]",
        "postgresName": "[concat(parameters('projectName'), '-', parameters('environment'), '-postgres')]",
        "redisName": "[concat(parameters('projectName'), '-', parameters('environment'), '-redis')]",
        "keyVaultName": "[concat(parameters('projectName'), '-', parameters('environment'), '-kv', uniqueString(resourceGroup().id))]",
        "logAnalyticsName": "[concat(parameters('projectName'), '-', parameters('environment'), '-logs')]",
        "appInsightsName": "[concat(parameters('projectName'), '-', parameters('environment'), '-insights')]"
    },
    "resources": [
        {
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2021-09-01",
            "name": "[variables('acrName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "adminUserEnabled": true
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2021-06-01",
            "name": "[variables('logAnalyticsName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 30
            }
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02",
            "name": "[variables('appInsightsName')]",
            "location": "[parameters('location')]",
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            ]
        },
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "2021-07-01",
            "name": "[variables('aksName')]",
            "location": "[parameters('location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "dnsPrefix": "[variables('aksName')]",
                "agentPoolProfiles": [
                    {
                        "name": "nodepool1",
                        "count": "[parameters('nodeCount')]",
                        "vmSize": "[parameters('nodeVmSize')]",
                        "osType": "Linux",
                        "mode": "System"
                    }
                ],
                "addonProfiles": {
                    "omsagent": {
                        "enabled": true,
                        "config": {
                            "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
                        }
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            ]
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[guid(resourceGroup().id, 'acrPull')]",
            "scope": "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
            "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksName')), '2021-07-01', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            },
            "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksName'))]"
            ]
        },
        {
            "type": "Microsoft.DBforPostgreSQL/flexibleServers",
            "apiVersion": "2021-06-01",
            "name": "[variables('postgresName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_B2s",
                "tier": "Burstable"
            },
            "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorPassword')]",
                "storage": {
                    "storageSizeGB": 32
                },
                "backup": {
                    "backupRetentionDays": 7,
                    "geoRedundantBackup": "Disabled"
                },
                "highAvailability": {
                    "mode": "Disabled"
                },
                "version": "14"
            }
        },
        {
            "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
            "apiVersion": "2021-06-01",
            "name": "[concat(variables('postgresName'), '/quantumlayer')]",
            "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresName'))]"
            ],
            "properties": {
                "charset": "UTF8",
                "collation": "en_US.UTF8"
            }
        },
        {
            "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
            "apiVersion": "2021-06-01",
            "name": "[concat(variables('postgresName'), '/temporal')]",
            "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresName'))]"
            ],
            "properties": {
                "charset": "UTF8",
                "collation": "en_US.UTF8"
            }
        },
        {
            "type": "Microsoft.Cache/Redis",
            "apiVersion": "2021-06-01",
            "name": "[variables('redisName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "Standard",
                    "family": "C",
                    "capacity": 1
                },
                "enableNonSslPort": false,
                "redisConfiguration": {
                    "maxmemory-reserved": "30",
                    "maxfragmentationmemory-reserved": "30"
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2021-11-01-preview",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [],
                "enableRbacAuthorization": true
            }
        }
    ],
    "outputs": {
        "acrName": {
            "type": "string",
            "value": "[variables('acrName')]"
        },
        "acrLoginServer": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))).loginServer]"
        },
        "aksClusterName": {
            "type": "string",
            "value": "[variables('aksName')]"
        },
        "postgresServerName": {
            "type": "string",
            "value": "[variables('postgresName')]"
        },
        "postgresConnectionString": {
            "type": "string",
            "value": "[concat('postgresql://', parameters('administratorLogin'), '@', variables('postgresName'), '.postgres.database.azure.com:5432/quantumlayer?sslmode=require')]"
        },
        "redisConnectionString": {
            "type": "string",
            "value": "[concat(variables('redisName'), '.redis.cache.windows.net:6380')]"
        },
        "keyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]"
        }
    }
}