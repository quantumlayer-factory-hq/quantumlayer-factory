#!/bin/bash
set -e

echo "üöÄ FastAPI Generation Demo - Week 9 Showcase"
echo "=============================================="

echo ""
echo "üìã Demo Overview:"
echo "   ‚Ä¢ Generate complete FastAPI application with authentication"
echo "   ‚Ä¢ Demonstrate 13+ file generation (exceeds 11 file target)"
echo "   ‚Ä¢ Show perfect router separation (auth.py vs users.py)"
echo "   ‚Ä¢ Create .qlcapsule package"
echo "   ‚Ä¢ Use real LLM integration (AWS Bedrock)"
echo ""

read -p "Press Enter to start generation..."

echo ""
echo "üéØ Generating: E-commerce API with user authentication"
echo "‚è≥ This will take about 60 seconds with real LLM..."

# Run the generation command
./bin/qlf generate 'Create a REST API for e-commerce with user authentication, product catalog, and order management' \
    --provider=bedrock \
    --model=anthropic.claude-3-sonnet-20240229-v1:0 \
    --package \
    --verbose

# Get the latest project directory
LATEST_PROJECT=$(find ./generated -maxdepth 1 -type d -name "project-*" | sort | tail -1)

if [ -z "$LATEST_PROJECT" ]; then
    echo "‚ùå No project generated"
    exit 1
fi

echo ""
echo "‚úÖ Generation Complete!"
echo "üìÅ Project: $LATEST_PROJECT"

# Count files
TOTAL_FILES=$(find "$LATEST_PROJECT" -type f -name "*.py" | wc -l)
echo "üìä Python files generated: $TOTAL_FILES"

# Check router separation
echo ""
echo "üîç Router Separation Check:"
if [ -f "$LATEST_PROJECT/routers/auth.py" ] && [ -f "$LATEST_PROJECT/routers/users.py" ]; then
    echo "‚úÖ Separate router files created:"
    echo "   ‚Ä¢ auth.py (authentication endpoints)"
    echo "   ‚Ä¢ users.py (user management endpoints)"

    # Show content samples
    echo ""
    echo "üìÑ auth.py endpoints:"
    grep -E "@router\.(get|post|put|delete)" "$LATEST_PROJECT/routers/auth.py" | sed 's/^/   ‚Ä¢ /'

    echo ""
    echo "üìÑ users.py endpoints:"
    grep -E "@router\.(get|post|put|delete)" "$LATEST_PROJECT/routers/users.py" | sed 's/^/   ‚Ä¢ /'
else
    echo "‚ö†Ô∏è  Router separation issue detected"
fi

# Check required files
echo ""
echo "üìã File Completeness Check:"
REQUIRED_FILES=(
    "main.py"
    "models.py"
    "schemas.py"
    "services.py"
    "repositories.py"
    "database.py"
    "config.py"
    "dependencies.py"
    "requirements.txt"
    "routers/auth.py"
    "routers/users.py"
)

MISSING_FILES=0
for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$LATEST_PROJECT/$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file (missing)"
        ((MISSING_FILES++))
    fi
done

if [ $MISSING_FILES -eq 0 ]; then
    echo "üéâ All $((${#REQUIRED_FILES[@]})) required files present!"
else
    echo "‚ö†Ô∏è  $MISSING_FILES files missing"
fi

# Check package creation
echo ""
echo "üì¶ Package Check:"
if [ -f "$LATEST_PROJECT/packages"/*.qlcapsule ]; then
    PACKAGE_FILE=$(ls "$LATEST_PROJECT/packages"/*.qlcapsule)
    PACKAGE_SIZE=$(du -h "$PACKAGE_FILE" | cut -f1)
    echo "‚úÖ .qlcapsule package created: $PACKAGE_SIZE"
else
    echo "‚ùå No .qlcapsule package found"
fi

# Show JWT authentication check
echo ""
echo "üîê Authentication Features:"
if grep -q "jwt\|JWT" "$LATEST_PROJECT/routers/auth.py" 2>/dev/null; then
    echo "‚úÖ JWT authentication implemented"
else
    echo "‚ö†Ô∏è  JWT authentication not detected"
fi

if grep -q "bcrypt\|passlib" "$LATEST_PROJECT/requirements.txt" 2>/dev/null; then
    echo "‚úÖ Password hashing with bcrypt"
else
    echo "‚ö†Ô∏è  Password hashing not detected"
fi

# Show database features
echo ""
echo "üóÑÔ∏è  Database Features:"
if grep -q "UUID\|uuid" "$LATEST_PROJECT/models.py" 2>/dev/null; then
    echo "‚úÖ UUID primary keys"
else
    echo "‚ö†Ô∏è  UUID primary keys not detected"
fi

if grep -q "postgresql\|psycopg" "$LATEST_PROJECT/requirements.txt" 2>/dev/null; then
    echo "‚úÖ PostgreSQL driver included"
else
    echo "‚ö†Ô∏è  PostgreSQL driver not detected"
fi

echo ""
echo "üéØ Demo Results Summary:"
echo "   ‚Ä¢ Files Generated: $TOTAL_FILES (target: 11+)"
echo "   ‚Ä¢ Router Separation: $([ -f "$LATEST_PROJECT/routers/auth.py" ] && [ -f "$LATEST_PROJECT/routers/users.py" ] && echo "‚úÖ Success" || echo "‚ùå Failed")"
echo "   ‚Ä¢ Package Created: $([ -f "$LATEST_PROJECT/packages"/*.qlcapsule ] && echo "‚úÖ Success" || echo "‚ùå Failed")"
echo "   ‚Ä¢ Missing Files: $MISSING_FILES"

if [ $TOTAL_FILES -ge 11 ] && [ $MISSING_FILES -eq 0 ] && [ -f "$LATEST_PROJECT/routers/auth.py" ] && [ -f "$LATEST_PROJECT/routers/users.py" ]; then
    echo ""
    echo "üéâ DEMO SUCCESS! All Week 9 objectives achieved!"
    echo "   Ready for design partner presentation ‚ú®"
else
    echo ""
    echo "‚ö†Ô∏è  Some objectives not fully met - review results above"
fi

echo ""
echo "üìÇ Generated project available at: $LATEST_PROJECT"
echo "üîç Explore with: ls -la $LATEST_PROJECT"